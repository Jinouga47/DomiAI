// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum AccountType { //Will be used to check if the user is a landlord or tenant
  LANDLORD
  TENANT
}
enum PropertyType { //Will be used to check if the property is a flat or house
  FLAT
  HOUSE
}
enum TenancyType { //Will be used to check if the property is shared or sole
  SHARED
  SOLE
}

enum PaymentStatus { //Will be used by Landlords to check if their tenants have paid their rent
  PAID
  UNPAID
}
enum PaymentMethod { //Will be used by Landlords to check how their tenants pay their rent. May be removed in the future
  BANK_TRANSFER
  CARD
  CASH
}
enum AccountStatus { //Will be used for landlords to check if their account is active via payment
  ACTIVE
  INACTIVE
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  phoneNumber   Int
  accountType   AccountType   @default(TENANT)
  emailVerified DateTime?
  image         String?
  tenants       User[]
  sessions      Session[]
  properties    Property[]
}

model Property {
  id           String   @id @default(cuid())
  title        String
  addressLine1 String
  addressLine2 String
  city         String
  county       String
  postCode     String
  bedrooms     Int
  bathrooms    Int
  propertyType PropertyType
  tenancyType  TenancyType
  description  String
  owner        User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String

  @@map("properties")
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}