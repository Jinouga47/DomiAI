// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  firstName         String
  lastName          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  email             String      @unique
  passwordHash      String
  role              UserRole
  status            UserStatus  @default(PENDING_VERIFICATION)
  lastLogin         DateTime?
  emailVerified     Boolean     @default(false)
  verificationToken String?
  resetToken        String?     @unique
  resetTokenExpiry  DateTime?
  twoFactorEnabled  Boolean     @default(false)
  twoFactorSecret   String?
  tenant            Tenant?
  landlord          Landlord?
  ticketResponses   TicketResponse[]

  @@map("users")
}

model Landlord {
  id                            String     @id @default(uuid())
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  userId                        String     @unique // Link to User table
  firstName                     String
  lastName                      String
  phone                        String?
  utrNumber                    String     @unique  // Unique Taxpayer Reference
  gasSafetyCertificateExpiry   DateTime?
  epcCertificateExpiry         DateTime?
  electricalSafetyCertExpiry   DateTime?
  depositProtectionSchemeId    String?
  properties                   Property[]
  documents                    Document[]
  user                         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("landlords")
}

model Tenant {
  id                    String     @id @default(uuid())
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  userId                String     @unique // Link to User table
  firstName             String
  lastName              String
  phone                 String?
  dateOfBirth           DateTime
  nationalInsuranceNo   String     @unique
  rightToRentCheckDate  DateTime
  rightToRentExpiry     DateTime?
  employmentStatus      EmploymentStatus
  annualIncome          Decimal?   @db.Decimal(10, 2)
  referenceCheckStatus  ReferenceCheckStatus
  tenancyAgreements     TenancyAgreement[]
  maintenanceTickets    MaintenanceTicket[]
  ticketComments        TicketComment[]
  documents             Document[]
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tenants")
}

model Property {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  landlordId       String
  addressLine1     String
  addressLine2     String?
  cityTown         String
  county           String?
  postcode         String
  purchaseDate     DateTime?
  propertyType     PropertyType
  tenure           TenureType
  councilTaxBand   String
  epcRating        String
  units            Unit[]
  documents        Document[]
  landlord         Landlord   @relation(fields: [landlordId], references: [id])

  @@map("properties")
}

model Unit {
  id                    String     @id @default(uuid())
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  propertyId            String
  unitNumber            String?
  squareMetres          Float?
  bedrooms              Int
  bathrooms             Int
  baseRentPcm           Decimal    @db.Decimal(10, 2)
  furnishedStatus       FurnishedStatus
  hmoLicense            String?
  councilTaxReference   String?
  property              Property   @relation(fields: [propertyId], references: [id])
  tenancyAgreements     TenancyAgreement[]
  maintenanceTickets    MaintenanceTicket[]
  documents             Document[]

  @@map("units")
}

model TenancyAgreement {
  id                          String     @id @default(uuid())
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @updatedAt
  unitId                      String
  tenantId                    String?
  tenancyType                 TenancyType
  startDate                   DateTime
  endDate                     DateTime
  monthlyRent                 Decimal    @db.Decimal(10, 2)
  depositAmount               Decimal    @db.Decimal(10, 2)
  depositProtectionRef        String
  breakClauseDate             DateTime?
  noticePeriodDays           Int
  status                      AgreementStatus
  renewalStatus              RenewalStatus
  unit                       Unit       @relation(fields: [unitId], references: [id])
  tenant                     Tenant?    @relation(fields: [tenantId], references: [id])
  rentPayments               RentPayment[]

  @@map("tenancy_agreements")
}

model RentPayment {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  tenancyAgreementId  String
  paymentDate         DateTime
  amount              Decimal    @db.Decimal(10, 2)
  paymentType         PaymentType
  status              PaymentStatus
  isLate              Boolean    @default(false)
  referenceNumber     String?
  tenancyAgreement    TenancyAgreement  @relation(fields: [tenancyAgreementId], references: [id])

  @@map("rent_payments")
}

model MaintenanceTicket {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  unitId              String
  tenantId            String
  title               String
  description         String
  priority            TicketPriority
  status              TicketStatus
  isEmergency         Boolean    @default(false)
  accessInstructions  String?
  preferredContact    ContactMethod
  availableDates      DateTime[]
  unit                Unit       @relation(fields: [unitId], references: [id])
  tenant              Tenant     @relation(fields: [tenantId], references: [id])
  updates             TicketUpdate[]
  comments            TicketComment[]
  ticketResponses     TicketResponse[]

  @@map("maintenance_tickets")
}

model TicketUpdate {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  ticketId            String
  createdById         String
  statusChange        TicketStatus
  scheduledVisitDate  DateTime?
  contractorDetails   String?
  ticket              MaintenanceTicket  @relation(fields: [ticketId], references: [id])

  @@map("ticket_updates")
}

model TicketComment {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  ticketId            String
  userId              String
  comment             String
  isInternal          Boolean    @default(false)
  followUpRequired    Boolean    @default(false)
  ticket              MaintenanceTicket  @relation(fields: [ticketId], references: [id])
  tenant              Tenant     @relation(fields: [userId], references: [id])

  @@map("ticket_comments")
}

model Document {
  id          String   @id @default(cuid())
  url         String
  fileName    String
  fileType    String
  fileSize    Int
  uploadedAt  DateTime @default(now())
  userId      String
  tenantId    String?
  landlordId  String?
  propertyId  String?
  unitId      String?
  category    DocumentCategory
  description String?
  isArchived  Boolean @default(false)
  
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  landlord  Landlord? @relation(fields: [landlordId], references: [id])
  property  Property? @relation(fields: [propertyId], references: [id])
  unit      Unit?     @relation(fields: [unitId], references: [id])

  @@map("documents")
}

model TicketResponse {
  id          String      @id @default(cuid())
  message     String
  createdAt   DateTime    @default(now())
  isLandlord  Boolean
  maintenanceTicket MaintenanceTicket @relation(fields: [ticketId], references: [id])
  ticketId    String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String

  @@map("ticket_responses")
}

enum UserRole {
  ADMIN
  LANDLORD
  TENANT
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum PropertyType {
  DETACHED
  SEMI_DETACHED
  TERRACED
  FLAT
}

enum TenureType {
  FREEHOLD
  LEASEHOLD
}

enum FurnishedStatus {
  FURNISHED
  PART_FURNISHED
  UNFURNISHED
}

enum EmploymentStatus {
  EMPLOYED
  SELF_EMPLOYED
  RETIRED
  STUDENT
  UNEMPLOYED
}

enum ReferenceCheckStatus {
  PENDING
  PASSED
  FAILED
  IN_PROGRESS
}

enum TenancyType {
  AST
  ROOM_ONLY
  HMO
}

enum AgreementStatus {
  ACTIVE
  INACTIVE
}

enum RenewalStatus {
  NOT_RENEWING
  PENDING_RENEWAL
  RENEWED
}

enum PaymentType {
  BANK_TRANSFER
  STANDING_ORDER
  DIRECT_DEBIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TicketPriority {
  ROUTINE
  URGENT
  EMERGENCY
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactMethod {
  EMAIL
  PHONE
  SMS
}

enum DocumentCategory {
  LEASE_AGREEMENT
  PROPERTY_INSPECTION
  MAINTENANCE_REPORT
  TENANT_ID
  PROOF_OF_ADDRESS
  INSURANCE
  CERTIFICATE
  OTHER
}